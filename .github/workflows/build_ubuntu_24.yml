name: build ubuntu 24.04

on:
  pull_request:
    branches:
      - debug
      - master
  push:
    branches:
      - debug
      - master

jobs:
  build:
    runs-on: ubuntu-24.04
    environment: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Update package list
        run:  sudo apt-get update
      - name: Install software-properties-common
        run: sudo apt-get install software-properties-common
      - name: Install clang compiler and tools
        run: |
          sudo apt-get -y install clang ccache cmake pkg-config curl wget
      - name: Install dependencies
        run: |
          sudo apt-get install -y \
              libc++-dev libomp-dev zlib1g-dev liblzma-dev libxml2-dev \
              libdbus-1-dev libprotobuf-dev protobuf-compiler libssl-dev \
              libgl1-mesa-dev libreadline-dev libpulse0 mesa-vulkan-drivers

      - name: Configure ENV
        run:  |
            echo "QT_DIR=${HOME}/Qt/6.9.1/gcc_64" >> $GITHUB_ENV
            echo "QT_HOST_PATH=${HOME}/Qt/6.9.1/gcc_64" >> $GITHUB_ENV

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v3
        env:
          cache-name: cache-qt
        with:
          path: |
              ~/Qt/6.9.1
          key: qtgcc_64-60901

      - if: ${{ steps.cache-qt.outputs.cache-hit != 'true' }}
        name: Install Qt
        continue-on-error: true
        run: |
            wget -q ${{secrets.PRIVATE_URL_DOWNLOAD}}/qt/qt-6.9.1-gcc_64-linux64.tar.xz
            mkdir -p ~/Qt
            tar xfJ qt-6.9.1-gcc_64-linux64.tar.xz -C ~/Qt/
            rm -f *.tar.xz

      - name: Fetch submodules
        run: git submodule init && git submodule update
      - name: Configure build
        run: |
          cmake -B build \
              -DCMAKE_C_COMPILER=/usr/bin/clang \
              -DCMAKE_CXX_COMPILER=/usr/bin/clang++ \
              -DCMAKE_PREFIX_PATH=${QT_DIR} \
              -DCMAKE_FIND_ROOT_PATH=${QT_DIR} \
              -DBUILD_DEVICE_MOBILE=ON \
              -DBUILD_SIMULATOR=ON -DBUILD_SIMULATOR_WITH_READLINE=ON \
              -Wno-dev
      - name: Build OSMIN
        run:  cmake --build build --target osmin
      - name: Build SIMULATOR
        run:  cmake --build build --target simulator
      - name: Build OSMSCOUT IMPORT
        run:  cmake --build build --target Import
      - name: Build OSMSCOUT STYLE EDITOR
        run:  cmake --build build --target StyleEditor
      - name: Install
        run:  sudo cmake --install build

